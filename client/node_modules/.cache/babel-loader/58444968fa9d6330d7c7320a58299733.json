{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { setMessage } from \"./messageSlice\";\nimport authService from \"../services/auth.service\";\nconst user = JSON.parse(localStorage.getItem(\"user\"));\nexport const register = createAsyncThunk(\"auth/register\", async (_ref, thunkAPI) => {\n  let {\n    username,\n    email,\n    password\n  } = _ref;\n\n  try {\n    const response = await authService.register(username, email, password);\n    thunkAPI.dispatch(setMessage(response.data.message));\n    return response.data;\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    thunkAPI.dispatch(setMessage(message));\n    return thunkAPI.rejectWithValue();\n  }\n});\nexport const login = createAsyncThunk(\"auth/login\", async (_ref2, thunkAPI) => {\n  let {\n    username,\n    password\n  } = _ref2;\n\n  try {\n    const data = await authService.login(username, password);\n    return {\n      user: data\n    };\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    thunkAPI.dispatch(setMessage(message));\n    return thunkAPI.rejectWithValue();\n  }\n});\nexport const logout = createAsyncThunk(\"auth/logout\", async () => {\n  await authService.logout();\n});\nconst initialState = user ? {\n  isLoggedIn: true,\n  user\n} : {\n  isLoggedIn: false,\n  user: null\n};\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState,\n  extraReducers: {\n    [register.fulfilled]: (state, action) => {\n      state.isLoggedIn = false;\n    },\n    [register.rejected]: (state, action) => {\n      state.isLoggedIn = false;\n    },\n    [login.fulfilled]: (state, action) => {\n      state.isLoggedIn = true;\n      state.user = action.payload.user;\n    },\n    [login.rejected]: (state, action) => {\n      state.isLoggedIn = false;\n      state.user = null;\n    },\n    [logout.fulfilled]: (state, action) => {\n      state.isLoggedIn = false;\n      state.user = null;\n    }\n  }\n});\nconst {\n  reducer\n} = authSlice;\nexport default reducer;","map":{"version":3,"sources":["C:/Users/Taylor/array/projects/showyourgroove_chatroom/src/state/authSlice.js"],"names":["createSlice","createAsyncThunk","setMessage","authService","user","JSON","parse","localStorage","getItem","register","thunkAPI","username","email","password","response","dispatch","data","message","error","toString","rejectWithValue","login","logout","initialState","isLoggedIn","authSlice","name","extraReducers","fulfilled","state","action","rejected","payload","reducer"],"mappings":"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","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport { setMessage } from \"./messageSlice\";\r\n\r\nimport authService from \"../services/auth.service\";\r\n\r\nconst user = JSON.parse(localStorage.getItem(\"user\"));\r\n\r\nexport const register = createAsyncThunk(\r\n    \"auth/register\",\r\n    async ({ username, email, password }, thunkAPI) => {\r\n        try {\r\n            const response = await authService.register(username, email, password);\r\n            thunkAPI.dispatch(setMessage(response.data.message));\r\n            return response.data;\r\n        } catch (error) {\r\n            const message =\r\n                (error.response &&\r\n                    error.response.data &&\r\n                    error.response.data.message) ||\r\n                error.message ||\r\n                error.toString();\r\n            thunkAPI.dispatch(setMessage(message));\r\n            return thunkAPI.rejectWithValue();\r\n        }\r\n    }\r\n);\r\n\r\nexport const login = createAsyncThunk(\r\n    \"auth/login\",\r\n    async ({ username, password }, thunkAPI) => {\r\n        try {\r\n            const data = await authService.login(username, password);\r\n            return { user: data };\r\n        } catch (error) {\r\n            const message =\r\n            (error.response &&\r\n                error.response.data &&\r\n                error.response.data.message) ||\r\n            error.message ||\r\n            error.toString();\r\n        thunkAPI.dispatch(setMessage(message));\r\n        return thunkAPI.rejectWithValue();\r\n        }\r\n    }\r\n);\r\n\r\nexport const logout = createAsyncThunk(\"auth/logout\", async () => {\r\n    await authService.logout();\r\n});\r\n\r\nconst initialState = user\r\n    ? { isLoggedIn: true, user }\r\n    : { isLoggedIn: false, user: null };\r\n\r\nconst authSlice = createSlice({\r\n    name: \"auth\",\r\n    initialState,\r\n    extraReducers: {\r\n        [register.fulfilled]: (state, action) => {\r\n            state.isLoggedIn = false;\r\n        },\r\n        [register.rejected]: (state, action) => {\r\n            state.isLoggedIn = false;\r\n        },\r\n        [login.fulfilled]: (state, action) => {\r\n            state.isLoggedIn = true;\r\n            state.user = action.payload.user;\r\n        },\r\n        [login.rejected]: (state, action) => {\r\n            state.isLoggedIn = false;\r\n            state.user = null;\r\n        },\r\n        [logout.fulfilled]: (state, action) => {\r\n            state.isLoggedIn = false;\r\n            state.user = null;\r\n        },\r\n    },\r\n});\r\n\r\nconst { reducer } = authSlice;\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}