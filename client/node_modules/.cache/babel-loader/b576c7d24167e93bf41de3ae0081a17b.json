{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nexport const signUpUser = createAsyncThunk(async (_ref, thunkAPI) => {\n  let {\n    username,\n    email,\n    password\n  } = _ref;\n\n  try {\n    const response = await fetch(\"https://mock-user-auth-server.herokuapp.com/api/v1/users\", {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        username,\n        email,\n        password\n      })\n    });\n    let data = await response.json();\n    console.log(\"data\", data);\n\n    if (response.status === 200) {\n      localStorage.setItem(\"token\", data.token);\n      return { ...data,\n        username: username,\n        email: email\n      };\n    } else {\n      return thunkAPI.rejectWithValue(data);\n    }\n  } catch (e) {\n    console.log(\"Error\", e.response.data);\n    return thunkAPI.rejectWithValue(e.response.data);\n  }\n});\nexport const loginUser = createAsyncThunk(\"users/login\", async (_ref2, thunkAPI) => {\n  let {\n    email,\n    password\n  } = _ref2;\n\n  try {\n    const response = await fetch(\"https://mock-user-auth-server.herokuapp.com/api/v1/auth\", {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    let data = await response.json();\n    console.log(\"response\", data);\n\n    if (response.status === 200) {\n      localStorage.setItem(\"token\", data.token);\n      return data;\n    } else {\n      return thunkAPI.rejectWithValue(data);\n    }\n  } catch (e) {\n    console.log(\"Error\", e.response.data);\n    thunkAPI.rejectWithValue(e.response.data);\n  }\n});\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState: {\n    username: \"\",\n    email: \"\",\n    isFetching: false,\n    isSuccess: false,\n    isError: false,\n    errorMessage: \"\"\n  },\n  reducers: {\n    clearState: state => {\n      state.isError = false;\n      state.isSuccess = false;\n      state.isFetching = false;\n      return state;\n    }\n  },\n  extraReducers: {\n    [signUpUser.fulfilled]: (state, _ref3) => {\n      let {\n        payload\n      } = _ref3;\n      state.isFetching = false;\n      state.isSuccess = true;\n      state.email = payload.user.email;\n      state.username = payload.user.username;\n    },\n    [signUpUser.pending]: state => {\n      state.isFetching = true;\n    },\n    [signUpUser.rejected]: (state, _ref4) => {\n      let {\n        payload\n      } = _ref4;\n      state.isFetching = false;\n      state.isError = true;\n      state.errorMessage = payload.message;\n    },\n    [loginUser.fulfilled]: (state, _ref5) => {\n      let {\n        payload\n      } = _ref5;\n      state.email = payload.email;\n      state.username = payload.username;\n      state.isFetching = false;\n      state.isSuccess = true;\n      return state;\n    },\n    [loginUser.rejected]: (state, _ref6) => {\n      let {\n        payload\n      } = _ref6;\n      console.log('payload', payload);\n      state.isFetching = false, state.isError = true, state.errorMessage = payload.message;\n    },\n    [loginUser.pending]: state => {\n      state.isFetching = true;\n    },\n    [fetchUserByToken.pending]: state => {\n      state.isFetching = true;\n    },\n    [fetchUserByToken.fulfilled]: (state, _ref7) => {\n      let {\n        payload\n      } = _ref7;\n      state.isFetching = false;\n      state.isSuccess = true;\n      state.email = payload.email;\n      state.username = payload.us;\n    }\n  }\n});\nexport const {\n  clearState\n} = userSlice.actions;\nexport const userSelector = state => state.user.user;\nexport default userSlice.reducer;","map":{"version":3,"sources":["C:/Users/Taylor/array/projects/showyourgroove_chatroom/src/state/userSlice.js"],"names":["createSlice","createAsyncThunk","signUpUser","thunkAPI","username","email","password","response","fetch","method","headers","Accept","body","JSON","stringify","data","json","console","log","status","localStorage","setItem","token","rejectWithValue","e","loginUser","userSlice","name","initialState","isFetching","isSuccess","isError","errorMessage","reducers","clearState","state","extraReducers","fulfilled","payload","user","pending","rejected","message","fetchUserByToken","us","actions","userSelector","reducer"],"mappings":"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","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\r\n\r\nexport const signUpUser = createAsyncThunk(\r\n    async({ username, email, password }, thunkAPI) => {\r\n        try {\r\n            const response = await fetch(\r\n                \"https://mock-user-auth-server.herokuapp.com/api/v1/users\",\r\n                {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        Accept: \"application/json\",\r\n                        \"Content-Type\": \"application/json\",\r\n                    },\r\n                    body: JSON.stringify({\r\n                        username,\r\n                        email,\r\n                        password,\r\n                    }),\r\n                }\r\n            )\r\n            let data = await response.json()\r\n            console.log(\"data\", data)\r\n\r\n            if (response.status === 200) {\r\n                localStorage.setItem(\"token\", data.token)\r\n                return {...data, username: username, email: email }\r\n            } else {\r\n                return thunkAPI.rejectWithValue(data)\r\n            }\r\n        } catch (e) {\r\n            console.log(\"Error\", e.response.data)\r\n            return thunkAPI.rejectWithValue(e.response.data)\r\n        }\r\n    }\r\n)\r\n\r\nexport const loginUser = createAsyncThunk(\r\n    \"users/login\",\r\n    async ({ email, password }, thunkAPI) => {\r\n        try {\r\n            const response = await fetch(\r\n                \"https://mock-user-auth-server.herokuapp.com/api/v1/auth\",\r\n                {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        Accept: \"application/json\",\r\n                        \"Content-Type\": \"application/json\",\r\n                    },\r\n                    body: JSON.stringify({\r\n                        email,\r\n                        password,\r\n                    }),\r\n                }\r\n            )\r\n            let data = await response.json()\r\n            console.log(\"response\", data)\r\n            if (response.status === 200) {\r\n                localStorage.setItem(\"token\", data.token)\r\n                return data\r\n            } else {\r\n                return thunkAPI.rejectWithValue(data)\r\n            }\r\n        } catch (e) {\r\n            console.log(\"Error\", e.response.data)\r\n            thunkAPI.rejectWithValue(e.response.data)\r\n        }\r\n    }\r\n)\r\n\r\nexport const userSlice = createSlice({\r\n    name: \"user\",\r\n    initialState: {\r\n        username: \"\",\r\n        email: \"\",\r\n        isFetching: false,\r\n        isSuccess: false,\r\n        isError: false,\r\n        errorMessage: \"\",\r\n    },\r\n    reducers: {\r\n        clearState: (state) => {\r\n            state.isError = false;\r\n            state.isSuccess = false;\r\n            state.isFetching = false;\r\n\r\n            return state;\r\n        },\r\n    },\r\n    extraReducers: {\r\n        [signUpUser.fulfilled]: (state, { payload }) => {\r\n            state.isFetching = false;\r\n            state.isSuccess = true;\r\n            state.email = payload.user.email;\r\n            state.username = payload.user.username;\r\n        },\r\n\r\n        [signUpUser.pending]: (state) => {\r\n            state.isFetching = true;\r\n        },\r\n\r\n        [signUpUser.rejected]: (state, { payload }) => {\r\n            state.isFetching = false;\r\n            state.isError = true;\r\n            state.errorMessage = payload.message;\r\n        },\r\n\r\n        [loginUser.fulfilled]: (state, { payload }) => {\r\n            state.email = payload.email;\r\n            state.username = payload.username;\r\n            state.isFetching = false;\r\n            state.isSuccess = true;\r\n            return state;\r\n        },\r\n\r\n        [loginUser.rejected]: (state, { payload }) => {\r\n            console.log('payload', payload);\r\n            state.isFetching = false,\r\n            state.isError = true,\r\n            state.errorMessage = payload.message;\r\n        },\r\n\r\n        [loginUser.pending]: (state) => {\r\n            state.isFetching = true;\r\n        },\r\n\r\n        [fetchUserByToken.pending]: (state) => {\r\n            state.isFetching = true;\r\n        },\r\n\r\n        [fetchUserByToken.fulfilled]: (state, { payload }) => {\r\n            state.isFetching = false;\r\n            state.isSuccess = true;\r\n\r\n            state.email = payload.email;\r\n            state.username = payload.us\r\n        }\r\n    },\r\n})\r\n\r\nexport const { clearState } = userSlice.actions;\r\nexport const userSelector = (state) => state.user.user;\r\nexport default userSlice.reducer;"]},"metadata":{},"sourceType":"module"}